{"version":3,"file":"static/js/522.27409b7f.chunk.js","mappings":"uRAEaA,EAAWC,EAAAA,GAAAA,GAAH,6KAeRC,EAAWD,EAAAA,GAAAA,GAAH,wDAKRE,EAAOF,EAAAA,GAAAA,EAAH,+CAIJG,EAAQH,EAAAA,GAAAA,IAAH,gE,sECQlB,EA9BgB,SAAC,GAAmB,IAAjBI,EAAgB,EAAhBA,UACf,GAAKA,EAIL,OACI,SAACL,EAAD,UACKK,EAAUC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OACX,UAACT,EAAD,WACMM,GACE,SAACJ,EAAD,CACAQ,IAAKH,EACLI,IAAG,yCAAoCL,MAGvC,SAACJ,EAAD,CACAS,IAAKC,EACLF,IAAKH,KAET,4BACI,wBAAKC,KACL,UAACP,EAAD,WAAM,cAAYQ,UAbXJ,EADJ,KAoB1B,ECaD,EArCa,WACT,OAAkCQ,EAAAA,EAAAA,UAAS,MAA3C,eAAOV,EAAP,KAAkBW,EAAlB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAjBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,oGAEVJ,GAAW,GAFD,UAGgBK,EAAAA,EAAAA,IAAQJ,GAHxB,OAGJK,EAHI,OAIVV,EAAaU,GAJH,gDAMS,iBAAf,KAAMC,MACNT,EAAS,KAAMU,SAPT,yBAUVR,GAAW,GAVD,4EAAH,qDAafI,GACH,GAAE,CAACH,KAGA,gCACKF,IAAW,SAACU,EAAA,EAAD,IACXZ,IAAUE,IAAW,yBAAG,UAAQF,MACjC,SAAC,EAAD,CAASZ,UAAWA,MAK/B,C,qLCvCKyB,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAIX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEwBN,EAASO,IAAT,uBAFxB,uBAESC,EAFT,EAESA,KAFT,kBAGQA,EAAKC,SAHb,2HASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaC,GAAxC,kGAEoBZ,EAASO,IAAT,8BAAoCI,GAAe,CACxEC,OAAAA,IAHC,uBAEKJ,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,2HAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BpC,GAA5B,kGAEwBuB,EAASO,IAAT,iBAAuB9B,IAF/C,uBAES+B,EAFT,EAESA,KAFT,kBAGQA,GAHR,2HASA,SAAeb,EAAtB,+CAAO,OAAP,oBAAO,WAAuBlB,GAAvB,kGAEoBuB,EAASO,IAAT,iBAAuB9B,EAAvB,aAFpB,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,EAAKM,MAHT,2HASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BtC,GAA1B,kGAEoBuB,EAASO,IAAT,iBAAuB9B,EAAvB,aAFpB,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2H","sources":["components/CastComponents/Cast.styled.jsx","components/CastComponents/Cast.jsx","components/pages/CastPage.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  max-height: 500px;\n\n  padding: 10px;\n\n  list-style: none;\n\n  overflow: auto;\n\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const Text = styled.p`\n  font-style: italic;\n`;\n\nexport const Image = styled.img`\n  width: 200px;\n  border-radius: 5px;\n`;","import { CastList, CastItem, Text, Image } from \"./Cast.styled\";\n\nimport defaultPicture from './avatar-picture.png';\n\nconst CastCom = ({ movieCast }) => {\n    if (!movieCast) {\n        return\n    }\n\n    return (\n        <CastList>\n            {movieCast.map(({ id, profile_path, original_name, name, character }) => (\n                <CastItem key={id}>\n                     {profile_path ? (\n                        <Image\n                        alt={original_name}\n                        src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                        />\n                    ) : (\n                        <Image\n                        src={defaultPicture}\n                        alt={original_name} />\n                    )}\n                    <div>\n                        <h4>{name}</h4>\n                        <Text>Character: {character}</Text>\n                    </div>\n                </CastItem>\n            ))}\n        </CastList>\n    )\n}\n\n\nexport default CastCom;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponents/Loader';\nimport { getCast } from 'services/api';\nimport CastCom from 'components/CastComponents/Cast';\n\nconst Cast = () => {\n    const [movieCast, setMovieCast] = useState(null)\n    const [error, setError] = useState(null)\n    const [loading, setLoading] = useState(false)\n\n    const { movieId } = useParams()\n    \n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                setLoading(true);\n                const fetchedCast = await getCast(movieId)\n                setMovieCast(fetchedCast)\n            } catch (error) {\n                if (error.code !== 'ERR_CANCELED') {\n                    setError(error.massage)\n                }\n            } finally {\n                setLoading(false)\n            }\n        }\n        fetchCast()\n    }, [movieId])\n\n    return (\n        <>\n            {loading && <Loader />}\n            {error && ~loading && <p>Error: {error}</p>}\n            <CastCom movieCast={movieCast} />\n            \n        </>\n    )\n\n}\n\n\nexport default Cast;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: '36aa473dfc5ec81fada547082bc4a5dd',\n        language: 'en-US',\n    },\n});\n\nexport async function fetchTrendingMovies() {\n    try {\n        const { data } = await instance.get(`/trending/movie/day`)\n        return data.results;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function searchMovie(queryString, signal) {\n  try {\n    const { data } = await instance.get(`/search/movie?query=${queryString}`, {\n      signal,\n    });\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n\nexport async function getMovieById(id) {\n    try {\n        const { data } = await instance.get(`/movie/${id}`)\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function getCast(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}"],"names":["CastList","styled","CastItem","Text","Image","movieCast","map","id","profile_path","original_name","name","character","alt","src","defaultPicture","useState","setMovieCast","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchCast","getCast","fetchedCast","code","massage","Loader","instance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","searchMovie","queryString","signal","getMovieById","cast","getReviews"],"sourceRoot":""}