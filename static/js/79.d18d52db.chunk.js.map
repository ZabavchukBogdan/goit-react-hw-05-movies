{"version":3,"file":"static/js/79.d18d52db.chunk.js","mappings":"oRAEaA,EAAcC,EAAAA,GAAAA,GAAH,6KAeXC,EAAcD,EAAAA,GAAAA,GAAH,4FAMXE,EAAcF,EAAAA,GAAAA,EAAH,gD,SCJxB,EAjBmB,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,aACpB,GAAKA,EAIL,OACE,SAACJ,EAAD,UACGI,EAAaC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,UAACN,EAAD,YACE,0BAAI,WAASK,MACb,SAACJ,EAAD,UAAcK,MAFEF,EADF,KAQvB,EC0BD,EApCgB,WACd,OAAwCG,EAAAA,EAAAA,UAAS,MAAjD,eAAOL,EAAP,KAAqBM,EAArB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBJ,GAAW,GAFM,UAIYK,EAAAA,EAAAA,IAAWJ,GAJvB,OAIXK,EAJW,OAMjBV,EAAgBU,GANC,gDAQE,iBAAf,KAAMC,MACRT,EAAS,KAAMU,SATA,yBAYjBR,GAAW,GAZM,4EAAH,qDAgBlBI,GACD,GAAE,CAACH,KAGF,gCACGF,IAAW,SAACU,EAAA,EAAD,IACXZ,IAAUE,IAAW,yBAAG,UAAQF,MACjC,SAAC,EAAD,CAAYP,aAAcA,MAG/B,C,qLCvCKoB,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAIX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEwBN,EAASO,IAAT,uBAFxB,uBAESC,EAFT,EAESA,KAFT,kBAGQA,EAAKC,SAHb,2HASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaC,GAAxC,kGAEoBZ,EAASO,IAAT,8BAAoCI,GAAe,CACxEC,OAAAA,IAHC,uBAEKJ,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,2HAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4B/B,GAA5B,kGAEwBkB,EAASO,IAAT,iBAAuBzB,IAF/C,uBAES0B,EAFT,EAESA,KAFT,kBAGQA,GAHR,2HASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAuBhC,GAAvB,kGAEoBkB,EAASO,IAAT,iBAAuBzB,EAAvB,aAFpB,uBAEK0B,EAFL,EAEKA,KAFL,kBAGIA,EAAKO,MAHT,2HASA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA0Bb,GAA1B,kGAEoBkB,EAASO,IAAT,iBAAuBzB,EAAvB,aAFpB,uBAEK0B,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2H","sources":["components/ReviewsComponents/Reviews.styled.jsx","components/ReviewsComponents/Reviews.jsx","components/pages/ReviewsPage.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  max-height: 500px;\n\n  padding: 10px;\n\n  list-style: none;\n\n  overflow: auto;\n\n`;\n\nexport const ReviewsItem = styled.li`\n  &:not(:last-child) {\n    border-bottom: 1px solid #111111;\n  }\n`;\n\nexport const ReviewsText = styled.p`\n  text-align: justify;\n`;","import { ReviewsList, ReviewsItem, ReviewsText } from './Reviews.styled';\n\nconst ReviewsCom = ({ movieReviews }) => {\n  if (!movieReviews) {\n    return;\n  }\n\n  return (\n    <ReviewsList>\n      {movieReviews.map(({ id, author, content }) => (\n        <ReviewsItem key={id}>\n          <h4>Author: {author}</h4>\n          <ReviewsText>{content}</ReviewsText>\n        </ReviewsItem>\n      ))}\n    </ReviewsList>\n  );\n};\n\nexport default ReviewsCom;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponents/Loader';\nimport { getReviews } from 'services/api';\nimport ReviewsCom from 'components/ReviewsComponents/Reviews';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setLoading(true);\n\n        const fetchedReviews = await getReviews(movieId);\n\n        setMovieReviews(fetchedReviews);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && !loading && <p>Error: {error}</p>}\n      <ReviewsCom movieReviews={movieReviews} />\n    </>\n  );\n};\n\nexport default Reviews;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: '36aa473dfc5ec81fada547082bc4a5dd',\n        language: 'en-US',\n    },\n});\n\nexport async function fetchTrendingMovies() {\n    try {\n        const { data } = await instance.get(`/trending/movie/day`)\n        return data.results;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function searchMovie(queryString, signal) {\n  try {\n    const { data } = await instance.get(`/search/movie?query=${queryString}`, {\n      signal,\n    });\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n\nexport async function getMovieById(id) {\n    try {\n        const { data } = await instance.get(`/movie/${id}`)\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function getCast(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}"],"names":["ReviewsList","styled","ReviewsItem","ReviewsText","movieReviews","map","id","author","content","useState","setMovieReviews","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchReviews","getReviews","fetchedReviews","code","message","Loader","instance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","searchMovie","queryString","signal","getMovieById","getCast","cast"],"sourceRoot":""}